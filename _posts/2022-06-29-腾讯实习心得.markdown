## 概述

> 关于本次实习，最大的体会就是，生活绝不会只是学习，生活的大部分是在与**琐事**打交道的。
>
> 
>
> 所以，除了学习技术外，还要学习**社交与表达**，尤其是 **异性社交** 这一块。

​	不错的导师、不错的同事、喜欢的技术栈、比较锻炼能力的工作。



## 技术选择

​	实际上开发岗和算法岗的区别还是很大的，体现在学历上，明显算法岗有更多AI方向的研究生，而开发岗是本科生也能做（那么研究生来做不会让学历浪费吗？）

> 从技术的角度来看，对计算机系统理解深刻的人固然厉害，但同时会承担更多的杂活、累活。

​	来腾讯实习，从技术的角度来说还是不够好。
​	因为腾讯这边的后端技术太旧了，维护的遗留项目太多了，加上这个leader又是比较老派的、比较复古的技术，甚至于出现了cpp写后端CGI的程序，不接轨于新的技术潮流。
​	但是无可否认的是，这些cpp11的代码确实写的很"工业级"，这是值得学习的一点，但是作为新一代程序员，其主要职责显然不应该是维护遗留项目，所以很期望写go做新项目。不过目前也是在向go rpc微服务这一块转型（但是有理由相信字节在这反面的转型更早一些、更彻底一些）。
​	关于业务方面，组里做的是一个典型的Web平台，但是工期比较赶要在九月前交付。本身我对Web后端就没什么兴趣，尤其是处理各种复杂的、嵌套的结构，以及业务密切相关的增删改查。

​	如果做Web的话，基于C++的开发方式确实是很原始、很低效的，甚至于还需要处理字符编码之类的问题。在比如说MySQL数据库，直接使用SQL文本进行写入，而并没有使用专用的连接器和编解码器。

> 吐槽一下导师的C++代码风格。导师果然是从C++98开始写的，以下一些现象：
>
> 1. 代码中出现了大量的指针而较少使用引用。同时，仅仅会利用左值引用来优化函数参数的拷贝开销，**而不会**利用右值引用来优化函数返回值的拷贝开销。甚至于对引用变量命名为 XXX_ref，说明对modern C++写的还不够多。
>
> 2. 超长的代码块使用try-catch包裹起来。实际上只需要将 “向MySQL写入、执行” 的代码包裹起来，这不仅性能更好，也更加便于明确运行时错误。
>
> 3. 无效的dummy constructor。我承认早期的C++编译器会将结构字段、以及栈变量初始化为垃圾值，但现代C++编译器应该约定**实现为“初始化为零值”（待考）**了吧，再去写一堆将字段初始化为零值的dummy ctor，我认为是不够简洁的。
>
>    **当然，这个问题涉及到C++代码风格，我更倾向于简洁的代码**。
>
>    



## 技术提升

- 一味地**模仿**是不能提升技术水平的。

> 比较遗憾的是，组内没有“技术讲座”之类的活动，缺少“提纲挈领”的环节，所以很多技术都是靠自己去探索的。

- 正确的做法应该是：充分**理解需求**和**库功能**后，再去做独立开发，之前存在的项目都只是**辅助设计**。
- 记住，**每一个项目都是独一无二的**。
- 技术广度 VS. 技术深度

​	扩展技术的广度，应当仅仅存在于无明确任务安排时。尤其是工作之后，技术的深度才是更主要的。

- 技术学习 VS. 任务驱动

​	从实习的情况来看，非常缺少 **任务驱动** 地去完成某项具体任务的能力。一方面是因为没有时间/进度上的约束，另一方面我的思维还停留在**“学习”而非“工作”**的阶段，所以很多时候是学习、尝试的心态。以上两点非常不利于培养“**任务驱动**”的工作节奏。

> 改进措施：
>
> 1. 为一项任务划定DDL，并安排每天完成该任务的哪一部分；这就涉及到**拆解任务的能力**。
>
> 2. 将学习的状态和工作的状态尽量明确地划分开，在工作时尽量减少新知识的学习，而把主要精力投入到特定的任务上去；并单独划分出一块时间（比如晚饭后）来深入地学习、沉淀新的知识。





## 工程师 VS. 程序员

​	"不是所有程序员都是工程师."

​	程序员可能只需要关注程序的**主体可行性**, 工程师还需要考虑:边界情况, 系统稳定性, 系统吞吐量, 时间复杂性 等诸多因素. 换言之, 工程师需要保证交付给客户的程序是经过足够优化的. 



## 公司氛围与企业文化

​	从其他前辈谈论公司安排与人事变化，可以看出依然是“**有人的地方就有江湖**”、“**天下熙熙皆为利来，天下攘攘皆为利往**”、“**薪资才是打工人的第一生存要义**”。

​	但是 Tencent 相较于 Alibaba 还是比较**包容自由**的（来自于过来人的亲身经历，并且“阿里味”这个词确实是火出圈了），但同样也存在一些不合理的现象：加班内卷、抢占成果 等。在进入共产主义社会之前，这些现象都是存在并且会长期存在的。



## 工程化方法

​	**基本的原则：** 

- 开闭原则: 对扩展开放, 对修改封闭. 在设计时就应当**有意识地**抽取公共的部分, 以保证后续工作都是在公共部分上扩展. 
- 单一职责原则: 单一模块应当聚焦单一功能, 并考虑各种边界情况. 让一个模块兼顾其他功能只会增加混乱程度. 
- 剃刀原则: 只保留最精简的, 最核心的**要素**, 

​	**重要的真相：**

- 实际上，并不是所有的项目都可以应用到该领域内目前最新的技术，很多时候可能只能使用老旧的技术去完成业务，且**以一种低效的方式**。
- 划分到每个开发，实际上所关注的横向业务是比较少的，但是需要关注更多纵向的属性，包括系统的稳定性、并发量、响应速度等。这些属性在开发时就必须要关注到，并且验收时有明确的要求。



## 主要工作

### 踩坑经历

​	公司的`网络结构`对开发非常不友好，导致无法使用IDE进行远程调试，只能够通过打印日志的方式；


​	为什么`接口会变化`？是因为经过了 edproxy 代理，又嵌套了一层结构；但如果直连 pod IP 就不会出现此问题。

​	CLion的`增量编译`也有坑：
​	1.所依赖的静态库实际上重新编译了，但是主体目标文件却没有重新链接；
​	2.源文件没发生改变，就不会被重新编译；

​	CLion的`远程构建`也有坑：

​	比如出现这个诡异的错误：[“error: expected class-name before ‘{’ token”](https://stackoverflow.com/questions/5319906/error-expected-class-name-before-token)，就是因为在和远程同步文件时没有及时清理无效文件。无效文件的引入则是因为，在本地重命名文件A为B，但是在远程就变成了保留A文件并添加B文件，此时的A文件就过期无效了。

​	结论：所以在项目的初始开发阶段（尤其是涉及到大量文件操作的阶段），如果遇到诡异的报错，很可能需要如下操作：**彻底删除远程的项目根目录，再重新上传全量代码**。



### 工作性质

​	实际上安排我做的部分类似于**用户数据的 ETL + BI **。

​	ETL指数据的抽取、转换、加载：

- 抽取：从Kafka取log数据转存到MySQL、Clickhouse等数据库中的一级表；
- 转换：针对log数据的特定字段进行子查询，并将记录存入二级表；
- 加载：将二级表中的数据加载到报表平台上，可以直接加载数据源、也可以加载Http接口。

​	因为需要结合领域进行定制化，且在数据转换过程中存在依赖的Http子查询，所以没有使用ETL工具平台，[例如这些](https://zhuanlan.zhihu.com/p/340393263)。



> **命令式转声明式**。在数据应用这一块，声明式编程被应用得越来越多，很多工作都是通过**在特定平台上**编写SQL、Operator来完成的。



>为什么会存在Svrkit框架？
>
>针对“服务治理”这一块，为什么Tencent只能沿用Unix网络库通过C++造出来不太好用的服务框架，而Google却能启发性地创造出gRPC这种易用的服务框架，并打造周边生态（GoLang、Protobuf）？这说明两者在技术规划上还是存在差距的。



### 项目经历

#### 维护r3c

**内容：**

​	Redis服务压力测试，hget命令的请求，非实际业务项目。

**收获：**

​	主要是熟悉C++项目、熟悉C++个库的使用、以及熟悉dev和IDC的使用。



#### 增强danmu

**内容：**

​	弹幕项目，属于实际业务项目。

​	消费上游Kafka数据，写入Redis，再以微服务的形式暴露出去。

**收获：**

​	主要是熟悉微服务架构（限C++旧项目），包括proto / thrift 等IDL。



#### 开发ip_service

**内容：**

​	独立完成的IP属地查询服务，属于基础服务。

​	借助tRPC框架进行开发。

**收获：**

​	熟悉docker容器的打包、运行、调试。

​	熟悉 TKE / rainbow / polaris 等 镜像管理 / 配置管理 / 服务管理平台的使用。



#### 增强gdata

**内容：**

​	用户数据统计项目，属于实际业务项目。

​	学习风控平台的接入，并整合。

**收获：**

​	如何维护大型项目。

​	如何接入公司现有平台。



#### 增强gdata

**内容：**

​	实际上这部分的工作分为两部分：

​	横向扩展部分：**可以模仿原有查询**编写新的用户风险查询；

​	纵向扩展部分：**将全部的数据接口**接入到TDBank平台，重点在于平台上的配置。

**备忘：**

​	已经完成的工作需要交接到导师那边，并通过他的验收。不然实际上这部分的工作是没有”被使用“的，尤其是你离开后这些工作是没人维护的。

​	至于时机，可以留到99之后完成交接。



#### 重构logk2d，支持多种数据库

​	完成了，但是过程有些曲折。

​	一次大的重构：从SQL字符串抽象出DTO结构。这主要是因为对 Clickhouse-cpp 库的理解不够，原本以为库函数能直接执行SQL，后面才知道向Update函数传递的Block结构。



#### 99 公益日

​	虽然我没有正式参与相关项目，但是看到一些现象。

​	**管理平台的线上事故**：某程序员没用好GoLang的WaitGroup，导致并发错误，然后一堆人围上来审查代码寻找逻辑错误。

​	一点比较值得肯定的是，先修复线上出错的PID，**做出敏捷的修复**。



## 其他

### 开源实习

​	不知道出于什么原因, 开源实习的玩法这两年突然就火了. 会不会是受GSoC的启发, 毕竟Google玩这个早了好多年; 另一方面, 会不会是疫情引起的线上办公的兴起. Tencent / iscas 等机构都在做. 

​	但是开源实习, 肯定是比不上线下的企业实习活动的. 



### 社交

​	平时同事们谈论的话题往往关于：买房、离职、子女教育 等方面，这属于是我需要面对、但又不是在现阶段面对的问题，所以一些事情听听就好。

​	然后我发现我身上诞生了一个梗，就是“Leo还在长身体嘛”。一方面我确实比较年轻还处于生长阶段，另一方面则是体现了玩梗人的**容貌焦虑**，因为他们的身体不会再生长了，所以就比较羡慕年轻人。



### 人物

#### PKU卷王

​	斜对面坐了一个算法岗，PKU本硕，26岁，CV方向的，入职1~2年。**那就是，卷王中的卷王。**

​	然后就感觉工作很闲的样子，平时就做做PPT、写写方案，每天五点下班。按照同事的话说，就是“躺着赚钱”的状态。

​	目前的工作与“用户风控平台”有关，属于是用户画像领域比较复杂的一个分支。



#### 大师

​	大师属于年长的后端开发岗，比较具有经济实力。每天在岗时间是很长的。

 	大师技术还是很牛的，在之前很难评级的时候就上了T11。

​	大师是不是做系统设计走火入魔了啊？想拉着我一起做核酸码系统，就是为了证明自己擅长高并发系统？

​	大师可能真的是不太会表达、不太会聊的那类人，包括他去做报告也是效果不好，所以从他那边了解一些公司内的技术信息其实是很困难的。



#### 武大师姐

​	师姐现在做数据中台，大概是2015前后博士毕业。

​	博士方向是数据库系统，现在做大数据平台相关工作，虽然涉及到大量的业务逻辑，但方向的整体关联性还是比较强的。

​	数据中台的话是直接从老板那边拿需求，去做一些指标的计算工作。接触到的数据源是很广泛的，对接到后台这边有人指引数据源。





### 计算机本科教育

​	在“中国计算机本科教育十分陈旧落后”这一点上，我和二十年前的计算机专业毕业生居然惊人一致地表示赞同。以及“单片机这门课很无聊”、“计算机学生主要靠自学”。

​	当然我相信，现在还处在计算机教育的早期发展阶段，有理由相信它今后能发展得更好。而且目前WHU CS的课程改革已经开始，且已经初具影响力了。





### 决策与执行

​	在企业里面，决策角色和执行角色还是划分得很清晰的。

​	当然并不是说执行角色相较于决策角色不重要，而是各司其职。





### 编程语言

​	大师（我导师）作为资深的工业级C++程序员，对编程语言的把握还是很精准的、品味还是很好的。

​	对于C++标准的演变与发展，大师的观点如下：1. 太新的特性、太复杂的特性不要出现在工业级代码里面；2. 标准的迭代意味着语言的包容性在增强；3. Go语言可能是C++在工业领域的后继，所以至少掌握这两门语言。

​	大师是强烈的Java反对派，存在以下方面的因素：1. Java是一门古老的语言；2. Java的商业化很严重；3. Java的盛行主要来自于遗留项目的影响力，典型如Apache基金会下的项目。

> 注：你可以排斥Java语言，但你不应该排斥Apache的遗留项目，例如Apache Kafka的广泛应用场景。

​	关于C与C++：C的小巧灵活反倒是其优势，因此适用于某些特殊场景。这么说是因为C具有ABI兼容性，或者说新的语言都会兼容C ABI；而C++不具备如此强大的ABI兼容性，因为C++ ABI是C ABI的超集。



## 警惕技术异化人

​	**虽然公司环境很好，但是感觉不少的“人”已经被** **技术**/**管理**/**效能** 等**这些互联网企业的特性所”异化“了**。总之和我之前接触到的学院老师气质不同，更是和我在老家接触到的贩夫走卒不同。

​	为什么有的人会被技术所异化？可以发现，大多数被异化的人都是学理工科出生，这是因为其**自身的人文素养不够**，受人文教育的程度不同。可以说，这部分人虽然技术能力很牛，做事的完成度很高，但是思想上的复杂性是不够丰富的。

​	终极目的：摆脱被社会单一化、扁平化、甚至是工具化；远离价值认可的单一化；过着思考过的、主观的人生；成为一个完整的、属于自己的人。

> ref：https://www.bilibili.com/video/BV1ad4y1S7ov



​	**如果对一个产品没有激情，那么做业务开发会很无聊。**这就是为什么要谨慎选择业务开发。



## 职场谎言

### “不合时宜的玩笑话”

​	在领导面前自嘲自己“沉迷魔域”，这完全**不合适**！

​	无论什么情形下，开玩笑说自己在魔域，传到领导那里就是**你真的在摸鱼**。尤其是他们工作还很紧张的前提下，真的是非常的不合适！



### “其实我对你是有些失望的”

​	明明自己已经完成了部分工作，但得到领导的评价却是“没什么大的产出”、“没有做一个完整的项目”。

1. **这可能是领导在使用激将法**，来刺激你的工作动力，从而提升产出。

2. 也可能是与领导的沟通不充分，没让你的工作过程和结果充分地反馈过去。

3. 当然，这也可能是领导单纯地在愚弄你，把自身的焦虑施放到别人身上。























