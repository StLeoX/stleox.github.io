## 概述

> 关于本次实习，最大的体会就是，生活绝不会只是学习，生活的大部分是在与**琐事**打交道的。
>
> 
>
> 所以，除了学习技术外，还要学习**社交与表达**，尤其是 异性社交 这一块。

​	不错的导师、不错的同事、喜欢的技术栈、比较锻炼能力的工作。



## 技术选择

​	实际上开发岗和算法岗的区别还是很大的，体现在学历上，明显算法岗有更多AI方向的研究生，而开发岗是本科生也能做（那么研究生来做不会让学历浪费吗？）

> 从技术的角度来看，对计算机系统理解深刻的人固然厉害，但同时会承担更多的杂活、累活。

​	来腾讯实习，从技术的角度来说还是不够好。
​	因为腾讯这边的后端技术太旧了，维护的遗留项目太多了，加上这个leader又是比较老派的、比较复古的技术，甚至于出现了cpp写后端CGI的程序，不接轨于新的技术潮流。
​	但是无可否认的是，这些cpp11的代码确实写的很"工业级"，这是值得学习的一点，但是作为新一代程序员，其主要职责显然不应该是维护遗留项目，所以很期望写go做新项目。不过目前也是在向go rpc微服务这一块转型（但是有理由相信字节在这反面的转型更早一些、更彻底一些）。
​	关于业务方面，组里做的是一个典型的Web平台，但是工期比较赶要在九月前交付。本身我对Web后端就没什么兴趣，尤其是处理各种复杂的、嵌套的结构，以及业务密切相关的增删改查。



## 技术提升

- 一味地**模仿**是不能提升技术水平的。
- 正确的做法应该是：充分**理解需求**和**库功能**后，再去做独立开发，之前存在的项目都只是**辅助设计**。
- 记住，**每一个项目都是独一无二的**。



## 工程师 VS. 程序员

​	"不是所有程序员都是工程师."

​	程序员可能只需要关注程序的**主体可行性**, 工程师还需要考虑:边界情况, 系统稳定性, 系统吞吐量, 时间复杂性 等诸多因素. 换言之, 工程师需要保证交付给客户的程序是经过足够优化的. 



## 工程化方法

​	几个基本原则: 

- 开闭原则: 对扩展开放, 对修改封闭. 在设计时就应当**有意识地**抽取公共的部分, 以保证后续工作都是在公共部分上扩展. 
- 单一职责原则: 单一模块应当聚焦单一功能, 并考虑各种边界情况. 让一个模块兼顾其他功能只会增加混乱程度. 
- 剃刀原则: 只保留最精简的, 最核心的**要素**, 





## 其他

### 开源实习

​	不知道出于什么原因, 开源实习的玩法这两年突然就火了. 会不会是受GSoC的启发, 毕竟Google玩这个早了好多年; 另一方面, 会不会是疫情引起的线上办公的兴起. Tencent / iscas 等机构都在做. 

​	但是开源实习, 肯定是比不上线下的企业实习活动的. 