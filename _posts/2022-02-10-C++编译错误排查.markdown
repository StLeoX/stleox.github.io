# C++ 编译错误 undefined reference to （找不到声明）快速排查

可能原因
Case 1, 链接时缺少定义了XXX的源文件或者目标文件或者库文件
\+ 1.1 缺源文件。
\+ 1.2 缺目标文件。
\+ １.3 缺库文件。

Case 2, 链接顺序不对
多个库文件链接顺序问题。
或者是存在**嵌套**：链接的库文件中又使用了另一个库文件

Case 3, 函数符号修饰不一样
\+ 3.1 函数定义和声明不一致。
\+ 3.2 C和C++混合编程（在c++代码中链接c语言的库）。
解决方案，加上extern "C"处理为模块，就可以了。
3.3 编译器版本或者编译器选项不一致。

Case 4，把**模板**函数写进了cpp文件中

Case 5，**api hinden**
这种情况常见于一些开源库里面的不兼容，前面的版本这个api是可以用的，库升级后，这个版本变成了hinden了。


怎么手动找到函数声明
有时候我们使用第三方的库文件，又找不到相应的文档；或者我们查到了函数修饰后的名字，但是太晦涩难懂，怎么翻译成源代码里面的函数声明呢？

\+ 怎么查看动态库文件里面提供了哪些函数符号？
首先，我们把bar.cpp文件编译成动态库bar.so文件，这个文件提供了函数void bar(int)的实现
要查看bar.so这个库里面提供了哪些函数符号，可以用**nm命令**
这里我们可以看到，在bar.so文件的代码段（.Text段），有函数_Z3bari的定义。这个_Z3bari就是bar(int)这个函数在名字修饰后在库文件中的名字，链接器就是看这个名字来进行链接活动。nm -C可以查看函数名字修饰之前的名字，大家可以试试看。

\+ 知道了函数修饰后的名字，怎么推函数声明？
那么，如果我们知道了某个库里面的函数修饰后的名字，有没有什么方法可以反推函数源文件中的声明呢？用**c++filt**这个命令就可以。


总结
总结起来就是三点：１．是不是编译器找不到定义了XXX的文件；２．是不是定义了XXX的文件，由于函数修饰的原因里面没有想要的XXX符号;3．找到了想要的符号，但是该符号是隐藏属性，不能链接使用。如果不确定库里面有没有这个XXX符号，用nm找，用c++filt可以从修饰后的符号找函数声明。