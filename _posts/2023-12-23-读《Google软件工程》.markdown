# 分析

### 概述

    第三四章关于软件开发、软件测试的技术和工具，属于是方法层面。第一二章关于团队协作、项目管理的内容，属于是思想与文化层面。相比之下，我更重视前两章。

    

### 团队协作

**团队**

    “人是软件工程中最大的不确定性因素。”这句话一针见血地指出来软件工程的核心挑战。

    面临这一挑战，我们创造了“团队协作”机制，用团队、项目、文档来约束人的行为，从产品设计、到研发、到测试、再到运营，各阶段的人共同组成了项目团队。因此，团队是软件开发工作的基本组织。

    

**不安全感**

    程序员会害怕别人看到并评判他们正在进行的工作。

    基于人性，如果人缺乏安全感，就倾向于避免将自己的工作过程暴露给团队。

    

**天才神话**

    另一个问题是“天才神话”，这是一种个人英雄主义。具体而言，程序员闭门造车，在不与其他团队成员充分交流的情况下，独自开发一个较大的特性提交给上游。且不论代码的正确性、代码的评审难度，在动机层面上这个特性真的是项目需要的吗，还是只是这个程序员的“个人意淫”？

    实际上，绝大多数软件开发团队都不需要天才级别的创造力，但几乎所有工作都需要成员至少<u>拥有最低水平的社交技能</u>。特别是在 Google 这样的公司，决定程序员职业生涯的其实是与人协同的工作能力。

    

**及早纠错**

    显然，错误越早被纠正，对项目造成的后续影响就越小，修复问题的成本也越低。

    还是上面这个例子，错误的特性开发进程应当通过交流被及早终止。

    “早失败，快失败，常失败”。“爬、走、跑”。

    

**巴士系数**

    软件开发有一个“巴士系数”，指多少关键开发者被巴士撞了会让项目停摆。

    显然巴士系数越高越好，它描述了<u>团队的健壮性</u>，可以衡量团队成员的可替换性。

    

**小步快跑**

    “小步快跑”是一种项目迭代风格。

    一般来说，程序员在紧凑的反馈环中效率是最高的：写一个新函数（或其他单元）-> 添加相应的测试用例 -> 做相应的重构工作。如此，在最小的开发单元完成后，团队就能尽快地发现并修复错误。

    所以，DevOps 环就是迎合这种项目快速迭代风格。

    

**社交的三大支柱**

    团队成员的社交遵循这三个方面：谦虚、尊重与信任。

    谦虚：保持“虚心若愚”的状态，学会接受批评。

    尊重：赞赏同事的工作能力，“LGTM”，对事不对人。

    信任：相信他人、放手让同事去做。

    结构上，“团队”与“自我”之间存在你强我弱的关系，所以要找到平衡点：程序员既不能失去自我，也不能过于以自我为中心。

    

**结对编程**

    “结对编程”是一种很好的开发方式。

    结对编程过程中必然产生双边甚至多边的冲突，这就需要成员的信任、尊重以及耐心。

    

### 知识共享

    软件工程的核心在于人。知识共享很重要，代码不会从无到有，人的专业技能也不能凭空就拥有。对于一个充满初级程序员的团队，成功的一个重要因素是对成员的培养和投资。

**书面知识**

    知识共享的一个重要方式是“书面知识”，形式上也就是文档。书面知识具有<u>规模化优势</u>，表现为零传播成本、低维护成本。

    广义上，代码也是一种书面知识。好的代码注释胜过文档，一个代码库就是一个知识库。

    好的书面知识：规范性、可读性、

    

**导师制**

    Google 是导师制度的发源地。

    

**向社区提问**

    形式上存在：群聊、邮件列表、问答平台。

    

### 平等工程

**平等工程的必要性**

    根本上，群体结构会演化成“引领者”与“追随者”两个群体。两者之间的权利存在失衡，不利于统一发展。

    人类的偏见：种族歧视、

    

**平等工程的实现方式**

    建立多元文化能力。

    使多样性具有可实践性。

    拒绝单一的方式。不可能用单一的哲学或态度来解决不平等问题，每个个体对“平等”的感受是存在差异的。

    

### 团队领导

**PM or TL**

    在 Google 技术团队有两个角色很重要，分别是 PM(Project Manager) 和 TL(Tech Leader)。一般而言，经验丰富的人员经理将担任管理职务，而经验丰富的高级工程师将担任技术主管职务。

    担任 TL 的动机。首先这是一种自我扩展，即使开发者的技术很好，但还是有上限的。如果扩展到团队，很多初级开发者在 TL 的领导下能提升这个上限。

    自我拓展除了技术方面的因素，还有管理方面的因素。

    

**仆人式领导**

    “仆人式管理”是指，领导者的主要工作是为他的团队提供一切必要的服务，就像一位管家照顾一个家庭那样。态度上，领导者要营造谦虚、安全、舒适的氛围，尽力消除官僚障碍，帮助成员达成共识。

> 这让我想起在tx的团队，总监从来不自称老板，而是称员工为老板。

    “倒金字塔式团队结构”的理念与此类似。首先“金字塔式团队结构”是领导者位于塔顶、凌驾于普通成员之上，那么“倒金字塔式团队结构”就是领导者位于最低点、服务于普通成员。

> “凌驾”一词也不准确，在金字塔式团队结构中领导者的领导策略往往是“<u>胡萝卜加大棒</u>”，就像骡夫对待骡子那样：他用胡萝卜引导他们前进，当这不起作用时，就用大棒鞭策他们。

    这种结构存在于，每个一线普通成员的独立工作能力都较强（**强单兵**），领导者只需要将他们“粘合”在一起（**弱组织**）。强单兵是这种结构能合理存在的前提。

    这种结构的目的还是在于充分发挥各个成员的创造力和工作能力，显然软件开发就是这样一种强烈需要创造性思维和解决问题能力的过程，不同于流水线工人的生产过程。与可替换的流水线工人不同，软件开发工程师需要培养，需要时间和空间来思考和创造。

> 不过现在低端开发职位也在转向流水线工人型，产生了所谓“CRUD 工程师”，这种可替换的人力当然是资本最青睐的。

    最佳领导者就是<u>把成员当人</u>的领导者。

    

**管理模式**

    以下是一些管理过程中的“破坏性模式”。这些模式未必是错误的，但是是存在潜在风险的。

- 雇佣平庸的人。

- 忽视低绩效员工。

- 忽视“人”的问题。

- 做“好好先生”。

- 打破招聘门槛。

- 想对待孩子一样对待团队成员：“对待孩子”表明了一种不信任成员的态度，这是一种过度的微观管理。

    

    另一些“积极的模式”。

- 领导者抛弃“自我”意识：带团时力求“主客观统一”。

- 成为“催化剂”。

- 移除工作障碍。

- 成为好老师和好导师：<u>平等工程</u>的需要。

- 坦诚相待：表明对团队的充分信任。

- 关注成员的幸福感。

    

**大规模团队领导**

    “大规模团队领导”是去管理各个团队的领导者，这是公司副总裁、部门总监的职务，下面分别称大领导、小领导。

    从微观管理转向宏观管理。“透过树木见森林”。大领导决策，小领导迭代-执行-反馈。

    要想着建立“自驱”的团队。大领导要帮助小领导建立自驱的团队，关键步骤包括：划分问题空间、**授权**子问题、按需迭代。

    首先是划分问题空间，这就体现了大领导分析复杂事务的能力。

    然后是授权。大领导将子问题授权给小领导，这是宏观管理中的**职责下放**手段。形象地说，大领导需要不断地绘制森林的地图，然后把砍树的工作分配给其他人。注意，谨慎地锚定一个团队的身份。

    最后是按需迭代。迭代-执行-反馈。按需，处理“重要事务”与“紧急事务”的关系。

    

### 效率工程

**效率度量**

    在 Google，我们使用 目标/信号/指标 (GSM) 框架来度量效率。

- 目标：期望达成的最终结果。

- 信号：用来判断我们是否已经得到了最终结果的东西。

- 指标：信号的代理。

    
