## 背景

去年的 Rust Conf 之后，第二次参加程序员的大型集会，还是想写点东西。  

      

## 开源治理

#### 开源的意义

重新思考“开源”的意义，社区的、项目的生命力很重要，比功能更重要，“生存是第一要义”。  

非盈利的开源项目实际上不会有一个确定的、宏大的目标、愿景，每个参与者都可以携带自己感兴趣的目标加入进来。  

所谓“愿景”可以理解为一个特定的目标，并且面向这个目标有相应的盈利循环，所以愿景应该存在于一个营利组织。  

      

盈利组织治理一个项目的思路是，什么特性的**商业价值**高，因此我需要什么特性，并由此吸纳什么样的人进项目。  

此时是商业价值决定需求。  

      

开源组织的思路是，现在某个人认为项目的特性是我想要的，同时在此基础上我还想提供什么特性。  

此时需求往往来源于个体想法和群体讨论。个体想法往往是启发式的，并且很依赖于项目的核心贡献者。  

      

#### 开源的协作模式

参与项目的人员，老人带新人是一种常见的协作模式。  

      

协作模式往往是异步而非同步，线上的、远程的异步协作，显著区分于线下的、办公室的同步协作。  

      

## 社交

可以肯定现场来了很多行业专家、企业程序员。但是我没怎么发生实质上的交流，因为我没有与这些老程序员对等交流的资本，我的资历太浅了。  

      

去 social 微软工程院的工程师有没有意义？  

动机包括：1.了解 ms 的情况，以及职业规划相关。2.了解 AIOps 的前沿进展。3.她声称关注青年发展，主要是人生发展。  

结论是这一想法更多是多巴胺驱使的冲动。其实真要坐在旁边又不敢聊或不会聊，所以要培养相应的社交能力。  

      

## 管理

### 管理能力

高洪涛老师几乎是全能的，他的技能点包括：  

1. 写代码  

2. 做架构  

3. 做产品  

4. 上台发言  

5. 连接人脉  

这简直就是我心中的**技术型创业者**的形象。  

      

结合他的情况，反思如何成长为一个技术型管理者？  

以技术能力作为底层载体，以管理能力和领导能力作为顶层目标，积极发展代理型关系。  

      

### 项目管理

项目的长期管理，必然遵循简本增效的思路，这是很多产品设计的出发点。  

      

沟通很重要。在企业里面的沟通内容，包括项目需求、工作任务，这些都属于是事前的责任划分，还有就是事后的责任划分，也称为“甩锅”。
