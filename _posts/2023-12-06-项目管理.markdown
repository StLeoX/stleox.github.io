> 在 UCAS 上的一门《创业实务》课程，导师侃侃而谈、传授经验有帮助，更多内容转到 [[管理学公开课]]。
> 
> 还整理了在软件项目管理过程中的一些经验和复盘。

    

# 沟通

    沟通交流是项目管理中的主要活动之一。

    

#### 以结果为导向

    以事项的结果为导向，而不是以人为导向。管理的根本目的是将事情做好，培养雇员的能力并非目的，它只是做好这件事情的一个可能手段。

> 善良的观点认为“人是目的而非手段”，但这个观点**不匹配**互联网企业的生产过程，后者是要“将人作为机器上的齿轮”。

    用人讲究的是**扬长避短**。所以不要推着雇员走，事情不要交给办不好的雇员去办，什么事情都办不好的雇员直接淘汰掉、替换掉，这比培养他更有效率。

    

#### 提建议的步骤

    在职场，如何进行有效地向上下级同事提建议，主要有四个阶段：信任-同频-准确有效-反馈。

- 信任：首先是建立信任、打开沟通渠道，让对方有意愿与我沟通；

- 同频：其次是同频，找到双方都能理解的角度、方式和节奏；

- 准确有效：然后才是如何准确、有效地传递信息，并且确保对方确实接收到了信息；

- 反馈：最后是让沟通变得可追踪、可落地，产生实际效果。比如约定一些具体的事项，以保证结果可追踪、进度可推进。

    这是一般框架，具体情况制定具体方案。

    

#### 解决矛盾冲突的步骤

> 此处化解冲突的方法只适用于非结构性矛盾。项目相关的矛盾大多是非结构性矛盾，因为项目中大家有共同的利益立场。

    第一步是稳定情绪。这类似于提建议的“信任”阶段。一方面是平复自己的情绪。方法包括反思、纠正自己对事实的误判，收起自己凶猛的情绪。另一方面是平复他人的情绪。方法包括不阴阳怪气，引导对方认识事实。

    第二步是明确矛盾。向对方发问，调查清楚对方反对我的原因。确认双方都明确矛盾，通过复述对方的观点，“按照我的理解，我们现在的问题是...”。

    第三步是表达观点、提出方案。有效、清晰地表达自己的观点，分析并提出双赢的解决方案，“对我来说，...”“我们现在应该...”。

    第四步是反馈。找到对方对我的观点的观点，检查观点层面的矛盾是否已经化解了。

    

#### 被安排工作，需要合作思维

    场景是我作为下属，被老板安排了工作，此时**需要“合作思维”而非“作业思维”**。

    应该当场讨论清楚以下几个方面：

- 工作期限：超时老板必然不高兴。

- 可提供资源：项目管理的一大误区是，什么活儿都往自己身上揽。老板向我要成果，我要向他要资源，资源包括人力、算力。

- 实施细节：方案、步骤讨论清楚，把自己的计划表述清楚，和老板确认细节，规划好后再去执行。

    

# 复盘

#### chatops 被安排程序型工作

    chatops 这个项目，客观上对我的能力提升并不大，所以在我眼里是杂活。程序型工作是指这些价值密度较低的工作，就比如“智能运维”这个项目，于我而言就是一个程序型的工作。

    智能运维案例，在被安排程序型工作的过程中有以下复盘。

    一方面是收集和分析“小道消息”的能力。如果有人告知我会被指定项目，我首先会核实这个消息的真实性。一旦确定消息属实，那么我就不会把精力花在原本项目的打磨上，甚至我会刻意地埋点、留下一些破绽，引导老师指出来，从而推进下一步。

    另一方面是顶层判断的能力，是站在立场层面的分析判断。我既然知道自己是软工中心的主力开发，就能料到自己的大作业会被指定项目。

    

#### chatops 缺少有效推进导致延期交付

    复盘chatops延期交付的事故。表象是测试的同学失职，更深层是一次管理失误。反思是，我不应该亲自做事，而是应该教手下做事，引导方式包括结果为导向、按时检查工作结果。

    按时检查工作结果。态度上，将工作与生活分离、不该有妇人之仁。行为上，有清晰的、可检查的、可推进的工作结果。例如在 chatops 端测任务中，就是给我看 curl 的测试截图。

    

#### 职责划分问题

    回答“程序员如何摆脱杂活”这个问题，我提出来最本质的方式是寻求分工的公平性，实际很难实现。

    在研发人员之间讲求责任划分本身就是不切实际的，在追求公正的过程中人心是复杂多变的。要避免这一点，**在顶层有两种判断**，一个是不进入这一框架，另一个是放弃追求公正。后者需要一种无私的精神，我暂时做不到。

    

#### 技术选型只能由技术领导完成

    技术选型强烈依赖于经验，这件事情是不能交给初级开发去做的。它不是一个程序型任务，而是一个创造型任务。

    在 chatops flask 让下属选型，这是一次错误的选型。选出来一个 flask-redis，这个项目早就没有维护了，尤其针对 python 这样不稳定的语言。这个技术有很多问题，耽误了后续的开发过程。

    

#### 没有伟大的程序员，只有伟大的团队

    作为管理者，千万不要什么活儿都往自己身上揽，要学会授权下属、任务下放。 

    如果我单纯管理不参与研发，我推崇“倒金字塔结构”。

    

#### 及时沟通，反馈情况，同步进度

    战略上，给下属派活，自己不要忘记回调了。如果派活之后没追踪进度、没回调，说明管理能力有问题。

    战术上，需要记录：

- 给谁安排了什么活？

- 什么性质：重要 or 紧急？

- 什么期限：长期短期？

案例：给 trj 安排调研任务，现在需要提醒他拿出来讨论。

    

# 参考