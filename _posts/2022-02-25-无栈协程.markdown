# 无栈协程(stackless coroutine)
## 1、基本概念  
一般的协程使用栈内存来存储数据，但是无栈协程不具备数据栈。
无栈协程常常使用 生成器 来实现，生成器只负责生成数据。  

无栈协程的演变：
raw callback -> generator（yield）-> future/promise -> async/await
演变得越来越易用，易用的标志是在任意位置轻松地启动/挂起/恢复协程。  

> 第一个阶段，直接使用**回调函数**，随之带来的问题是“回调地狱”；
>
> 第二个阶段，使用 Promise/**Future** 并发模型，解决了回调函数的问题，但是代码依旧有很多冗余；
>
> 第三个阶段，利用协程实现**async/await关键字**，也号称“异步的终极解决方案”。



区别于线程、协程的并发编程方式，异步编程的最终目标是实现async/await关键字。

目前，实现async/await关键字为语言项的有：JavaScript，Python，





## 2、生成器具备协程的哪些特点  
无栈协程的本质就是**状态机**，yield 的本质就是状态转移。  

### 普通协程的特点
（参考 Lua Coroutine 和 goroutine）  

*   yield/resume 具备暂停执行的能力
*   stack store 私有栈区上的上下文存储
*   entry function 显式的入口函数
*   Exception 异常处理（如 Timeout Exception）


### 无栈协程具备普通协程的某些特点  

*   （最基本的）具备暂停执行的能力，通过 yield 代替 return 返回
*   具备存储上下文的能力，是以参数传递的形式存储的
*   具备异常处理，比如通过 Iterate Exception 迭代异常（如尾部元素）来终止异步迭代

  






## 3、无栈协程与有栈协程的差异  
1. 局部数据的存储方式 
    无栈协程的局部存储是通过参数传递实现的，典型的如 Lua 的 coroutine.yield 和. resume 函数都允许携带额外数据。  

  

2. 是否可以在其任意嵌套函数中暂停执行 
    有栈协程具备栈上存储，于是暂停执行的场景更加广泛。 
    **有栈协程场景下，同步逻辑转异步逻辑代码更加干净。 ** 

  

  比如使用无栈协程的 JavaScript 就不能这么写：  
```javascript
    async function processArray(array) {  
        // 显然这里 forEach 是个嵌套函数  
        array.forEach(item => {  
            // Uncaught SyntaxError:  
            // await is only valid in async function  
            const result = await processItem(item)  
            ...  
        })  
    }
```
​		但使用有栈协程的 Golang 就可以轻松实现类似的逻辑：  
```go
    func processArray(array []int) {  
        for i := 0; i <len(array); i++ {  
            ch := make(chan int)  
            go processItem(array[i], ch)  
            result := <- ch  
            ...  
        }  
    }  
```
这也直接导致了有栈协程在兼容现有的同步逻辑时非常方便，可以说是 go 关键字一键转异步逻辑。 
而无栈协程兼容同步逻辑时，会出现 async/await **关键字的传染性问题**。



3. 无栈协程的局限性

   生成器只能产生新的数据，不能进行**控制转移**。

   **生成器逐步产生数据的模式，很类似于，开启额外协程来逐步产生数据的模式。**





