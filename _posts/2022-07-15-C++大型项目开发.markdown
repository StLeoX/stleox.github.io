## 依赖管理

### 依赖管理工具

​    C++ 语言本身有依赖管理工具吗？无。

​    C++ 的依赖管理是交给 Apt/Yum 和 CMake 代理的。

### 依赖版本管理

    依赖管理的核心问题是依赖的版本管理。这个问题与语言无关，只要是全局的（sharing dependencies between apps），就需要解决这个问题，不论是还是 `pip` 还是 `apt`。

1. 最新的未必是最好的，**稳定兼容**的才是最好的

    一般而言，在版本管理中存在以下两类问题，以 `pip` 为例。

- 依赖版本过高：当前依赖舍弃了某个API，但是App还在用；或是修改了某个API，但是App在用旧版API；

- 依赖版本过低：当前依赖还不存在某个API，但是App已经用上了更新的API（最新版依赖确实提供该API）；

    针对依赖版本过高/低的问题当然是限制其最高/低版本。一般而言，需要对两者都进行限制。不幸的是，针对全局依赖，很显然的在不同App中的限制区间可能不相交。

    所以我们约定，开发者应该持续升级自己的App，使其跟随最新版依赖的API。

    还有一个问题是，为什么不能**同时缓存多个版本的依赖**？这样我们在使用时显式指定即可。原因不清楚，但是没见过全局的管理工具是这样做的。

## 配置管理

​    实在是无法理解，为什么 C++ 项目的配置还需要写在 shell 脚本、以环境变量的形式，这种对可执行文件的古老的调用方式，应该只停留在上一世纪。

    现代化的做法是专门的配置文件，如 `yaml` , `json`。

## 大型软件设计原则

1. 三思而后行

> Think twice, code once.



2. 惰性地添加新特性

> Delay adding new features until it is clear how the new features will be used.  
> 
> -- From *Google BigTable Design*

    不必急于添加新特性，而应该先明确新需求。因为特性是跟随需求变化的。