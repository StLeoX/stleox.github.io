## Raft 算法只办三件事

**三件事：选主、备份、扩(缩)容。** 但这三件事之间是有关联的、相辅相成的。

### 选主

    即选出 leader。重点在于**三状态之间的转移**。

> candidate -> leader / follower / candidate 分别对应于 win、lose、vote split 三种情况；
> 
> follower -> candidate 对应于"超时选举"，不会直接转到 leader 状态；
> 
> leader -> follower 这个条件需要注意，即 leader 发心跳发现更大的 term。

    

### 备份

    即同步各个 log 副本。

    

### 扩(缩)容

    即增(减)节点数量，这在Paper中称为“配置（configuration）”。

    扩容是基于“**两阶段**”的，存在中间配置状态称为“joint consensus”。

    缩容很容易实现，在常规阶段选取 follower 将其下线即可。注意到需要选取偶数个节点，以使得之后的配置仍然有奇数个节点。

    

## Raft 与 Git，一个新视角

    Git 作为**分布式**版本控制系统，很多设计也遵循了一致性算法。

    状态上的比较：

| Raft     | Git         | 概念                  |
| -------- | ----------- | ------------------- |
| Log      | Branch      | 副本，连续增长相同数据的区间      |
| LogEntry | Commit      | 数据变更的单位             |
| Leader   | master/main | 主副本、主分支，接收当前用户提出的变更 |
|          |             |                     |

    行为上的比较：

| Raft | Git      | 概念                        |
| ---- | -------- | ------------------------- |
| Vote | Checkout | 切换（注意，Raft 自动完成、Git 手动完成） |
