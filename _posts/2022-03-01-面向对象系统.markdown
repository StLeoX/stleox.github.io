## 面向对象系统的分类

我认为，OO-System可以划分为以下三种：class-based OO-System，prototype-based OO-System，contract-based OO-System。

### 1、tree-like OO-System

**tree-like OO-System：class-based OO-System & prototype-based OO-System**

![img](https://pic1.zhimg.com/80/v2-f1740cfed1a59ce2331f14cb1b9c6520_1440w.jpg)

如果是自顶向下构建系统，通过extends，就是class-based；

自顶向下的含义是：先有类再有实例

代表语言有：C++，Java。

如果是自底向上构建系统，通过prototype，就是prototype-based；

自底向上的含义是：先有实例再有类

代表语言有：ES5，Lua（metatable）。

既然是树状结构，就不存在：

![img](https://pic1.zhimg.com/80/v2-259bc36c9e3dcfdbbe18e723e2253a88_1440w.jpg)

![img](https://pic3.zhimg.com/80/v2-be114d9f66d32ba59a2f00776853d2e6_1440w.jpg)

这使得整颗类树更加规整，同时耦合性更强。





### 2、mesh-like OO-System

**mesh-like OO-System：contract-based OO-System**

![img](https://pic3.zhimg.com/80/v2-e8f97426c247f9fd9835cdada775476e_1440w.jpg)

整个contract-based OO-System抛弃了耦合的子继承多态性，转向随意多态。

代表语言有：go（interface），rust（trait）

网状结构反映出来：一个Struct可以实现多个Trait，一个Trait也可以被多个Struct实现，如此就大大降低了耦合性。

上述表示存在缺陷：“两条直线交点唯一”，但实际上共同实现若干Trait的Struct可以存在很多。

所以上图使用曲线来描述更合适。

同时，另一个可能的问题就是，“代码的复用性”。

可能认为mesh-like OO-System的代码复用性不好，实际上这是一种“**组合优于继承**”的方式。

在tree-like OO-System中通过组合**直接就**继承了superclass的代码，但在mesh-like OO-System中可以通过组合的方式**可控地**复用其他Trait Implement的代码。





### 3、mixed OO-System

同时支持上述两种方式，代表语言存在：Python

Python支持关键字class定义Class，故支持class-based OO；

Python支持obj.method = function（使用上受限于slot属性），故支持prototype-based OO；

（不存在显式的prototype结构，但是约定双下划线起始的方法属于__attributes）；

Python支持mixin，mixinClass到Class的派生是多重的，故支持contract-based OO；

ES6引入class关键字，所以也支持class-based OO。