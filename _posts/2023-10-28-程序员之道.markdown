# 编程技艺

## 心法

**将编程技艺置于社交技艺的对立面？**

    引言：[科技爱好者周刊（第 258 期）：卡马克的猫 - 阮一峰的网络日志](https://www.ruanyifeng.com/blog/2023/06/weekly-issue-258.html)

    论点：也许"亲人"和"亲代码"就是有点对立。**性格特别和善可亲的人，往往不容易成为优秀程序员。**

    论据：根据在星环公司观察到的情况，似乎确实如此。程序员除了程序本身，其他一切都不那么在乎，往往能创造更有价值的软件。

    

**提升效能的意识**

    程序员在工作中**要有提升效能的动机**，主要方式包括通过自动化提升工作效率。

    提升效能仍然采用**迭代的基本模式**。

**做题家与程序员几乎是对立的思维模式**

    做题家知道，问题的答案是唯一的，所以自己只需要努力找出来“正确答案”即可，目标很明确。

    但是在编程过程中，大到架构设计、小到函数签名的设计，都绝对不是唯一的，我们只是在努力寻找最优解，寻找BugFree的方案。

    这只能是一个不断逼近的过程，所以需要不断地修正目标，甚至会对阶段性的目标完全推倒从来。

    

## 方法

### 结对编程

**结对是如何提升效能的**

    两个能力相当的程序员，相互审查代码，往往能收获 1+1>2 的效果。

    

### 迭代

    迭代之于编程、之于产品设计、之于解决方案，都是一种基本的方法论。

    只有通过迭代，才能让程序/产品/方案向预期的方向发展。

    通过编程解决问题的过程，就是迭代解决子问题、最终达到期望状态的过程。

    

### 大模型辅助开发

    大模型实际上就是从无穷状态中**构造出了一个初始状态**，让我们能通过提问的方式不断迭代、直到我们期望的结果状态。

    利用大模型解决问题，更加需要提炼问题、提炼根本问题的能力。参考《提问的艺术》。

    有时候我们看似在解决最终问题，实际上只是在解决子问题而没有解决根问题。

    

**快照学习法**

    对大模型的会话做间隔重复记忆，从而拓展背景知识的边界。这是因为向大模型提出的问题都属于知识缺口。

    

**根因分析**

    利用大模型适合从入口处分析问题（根因），或者说善于从宏观上理解和把握问题。这是因为大模型掌握的背景知识是足够充分的。



# 程序本体

## 设计模式

**控制反转**

    控制反转是设计模式的一个目标。直观理解“控制反转”的概念：控制即是控制结构与函数入口，反转即是使用（转到）这些控制的方式。

    

## 经验驱动的设计
