# 分析

## Google 软件测试概述

#### Google 对待测试的态度

    在 Google，软件测试团队归属于一个被称为“工程生产力”（译注：Engineering Productivity，也译为工程效率或工程生产率）的中心组织部门，这个部门的职责横跨开发测试人员使用工具的研发、产品发布和各种级别的测试，从单元级别的测试到探索性级别的测试。

    Google是一家以创新和速度为基础的公司，快速地发布有用的代码（如果失败，也只有少数早期用户会失望）、迭代地增加早期用户希望使用的功能（最大化用户反馈）。在这样的环境下，测试不得不变的异常灵活，并且在技能上要做许多前期的规划，只是不停地简单维护并不能真正解决问题。

    有时，测试和开发互相交织在一起，达到了无法区分彼此的程度，而在另外一些时候，测试和开发又是完全分离，甚至开发人员都不知道测试在做些什么。

    Google 会尽量精简测试团队。Google的测试团队并非雄兵百万，我们更像是小而精的特种部队，我们依靠的是出色的战术和高级武器。由于资源的缺乏，这也是我们向特种部队方向发展的根本原因。没有足够的人手，使得我们不得不去做好优先级的安排，遵循“少则清晰”原则。

    可以确定一点，测试不能成为导致创新和开发过程变慢的阻碍。

    在Google，每个写代码的开发者本身就是测试者，质量在名义上也由这样的开发测试组合共同承担。

    

#### 质量不等于测试

    质量不是被测试出来的——这句看似陈词滥调的话却包含着一定的道理。从汽车行业到软件行业，如果在最开始设计创建的时候就是错的，那它永远不会变成正确的。

    开发和测试应该并肩齐趋。你需要在写完每一段代码后立刻测试这段代码，当完成了更多的代码时就要做更多的测试。测试不是独立隔离的活动，它本身就是开发过程的一部分。质量不等于测试，当你把开发过程和测试放到一起，就像在搅拌机里混合搅拌那样，直到不能区分彼此的时候，你就得到了质量。

> “在搅拌机里混合搅拌”，这里接近 **DevOps** 的概念。

    这意味着质量更像是一种预防行为，而不是检测。质量是开发过程的问题，而不是测试问题。我们已经成功地将测试实践融入为开发过程的一部分，并创建了一个增量上线的流程。在Google，测试的目标就是来判断这种预防工作做的怎么样。

    

#### SWE、SET 角色与职责

    测试人员的存在是为了让开发人员的工作更有效率，并且很大一部分体现在避免因马虎粗心而导致的返工。

    软件开发工程师（译注：software engineer，后文简称SWE）是一个传统上的开发角色，他们的工作是实现**最终用户所使用的功能代码**。SWE需要编写与测试代码，包括测试驱动的设计、单元测试、参与构建各种大小规模的测试等。

    软件测试开发工程师（译注：software engineer in test，后文简称SET）也是一个开发角色，只是工作重心在**可测试性和通用测试基础框架**上。他们参与设计评审，非常近距离地观察代码质量与风险。为了增加可测试性，他们甚至会对代码进行重构，并编写单元测试框架和自动化测试框架。

    测试工程师（译注：test engineer，后文简称TE）是一个和SET关系密切的角色，有自己不同的关注点——**把用户放在第一位来思考**，代表用户的利益。一些Google的TE会花费大量时间在模拟用户的使用场景和自动化脚本或代码的编写上。

    资深管理者一般都来自产品经理或开发经理，而不是来自于测试团队。在产品发布时，优先考虑的是功能是否完整和易用性方面是否足够简单，却很少考虑质量。作为同一个团队，测试总是在为开发让路。

    测试人员基本上以**租借的方式**进入产品团队，去做提高质量相关的事情，寻找一些测试不足的地方，或者公开一些不可接受的缺陷率数据。

    这些功能相关的脏活累活本应是开发人员的工作，不能简单地扔给倒霉的测试人员。

    这种测试人员在不同项目之间的借调模式，能保证一个好的测试想法可以快速在公司内部蔓延。一个在Geo产品上运用很好的测试技术或工具，很有可能在 Chrome 产品中也得到使用。

    Google 的测试工程师在客户端、Web、浏览器、移动技术等领域都有所涉猎，可以高效地使用不同的语言和平台。由于Google的产品和服务很大程度上有比较强的集成关联关系，测试人员可以很容易地保持相关的专业技能，并在公司范围内的产品之间自由穿梭。

    

#### “爬、走、跑”开发模型

    Google 在一个产品的基本核心功能实现之后，就立刻对外发布使用，然后从用户那里得到真实反馈，再进行迭代开发。

> 据说在 Google 项目，特性只有 "Deprecated" 与 "Experimental" 这两种状态。

    “爬、走、跑”开发模型有一些贴切的 slogan：First do it, then do it right, then do it better.

    

#### 测试类型

    Google并没有使用代码测试、集成测试、系统测试等这些命名方式，而是使用小型测试、中型测试、大型测试这样的称谓，着重强调测试的范畴规模而非形式。

    小型测试涵盖单一的代码段，一般运行在完全虚假实现（fake）的环境里。

    中型测试涵盖多个模块且重点关注在模块之间的交互上，一般运行在虚假实现环境或真实环境中。

    大型测试涵盖任意多个模块，一般运行在真实的环境中，并使用真正的用户数据与资源。

    小型测试带来优秀的代码质量、良好的异常处理、优雅的错误报告；大中型测试会带来整体产品质量和数据验证。

    检验一个项目里小型测试、中型测试和大型测试之间的比率是否健康，一个好办法是使用代码覆盖率。这个比例并不是固定的，总体上有一个经验法则，即70/20/10原则：70%是小型测试，20%是中型测试，10%是大型测试。

    自动化测试：测试的规模越小，就越有可能被实现成为自动化的测试。我们甚至把开bug和日常的手动工作都自动化实现了，例如，如果自动化用例运行失败，系统会自动检查到最后一次代码变更的内容，这些变更极有可能是造成失败的罪魁祸首。

    

## 软件测试开发工程师(SET)

    Google的SWE是功能开发人员；Google的SET是测试开发人员；Google的TE是用户开发人员。

    从 SET 的视角，开发过程应当如何进行呢？测试先行，在一行代码都没有真正编写之前，一个开发人员就会去思考如何测试他即将编写的代码。

    编写功能代码和编写测试代码在思维方式上有着很大的不同。对于功能代码而言，思维模式是创建，重点在考虑用户、使用场景和数据流程上；而对于测试代码来说，**主要思路是去破坏**，怎样写测试代码用以扰乱分离用户及其数据。

    

#### SET 的主要职责

    众所周知，Google 代码仓采用 Mono Repo 的方式。公开的代码库、和谐的工程工具、公司范围内的资源共享，成就了丰富的Google内部共享代码库与公共服务，不管是对 SWE 还是对 SET。

> “百分之二十时间”是指 Googler称为的“业余项目”。这并不是一个炒作的概念，而是官方真正存在的，允许所有 Googler每周投入一天时间在他的日常工作之外的项目上。每周四天工作用来赚取薪水，剩下一天用以试验和创新。

    所有的工程师必须复用已经存在的公共库，除非在项目特定需求方面有很好的理由。

> 正是这种极致的代码复用思想，Google 才创造了 MonoRepo Code Search、GoLang、Kubernetes 等工具和平台。

    最重要的一点，SET是软件工程师，正如我们招聘宣传海报和内部晋升体系中所说的那样，是一个100%的编码角色。

    测试是应用产品的另外一种功能，而SET就是这个功能的负责人。

> 很精妙的观点。所以我看项目先看单测代码，因为单测就指明了功能代码的典型用例。

    

#### SET 参与项目

    SET 较少工作在软件的早期阶段。“只有在软件产品变的重要的时候质量才显得重要。”

> 因为很多产品在MVP（最小可行产品）状态就被毙掉了。

    在项目早期，Google一般不会让测试介入进来。实际上，即使SET在早期参与进来，也不是从事测试工作，而是去做开发。绝非有意忽视测试，当然也不是说早期产品的质量就不重要。这是受Google**非正式创新驱动产品**的流程所约束。

> "product from scratch" 敏捷 迭代

    在项目还是概念阶段的时候，测试人员不会参与进来，而项目一旦真正立项，我们就要在这些测试是如何执行的方面发挥我们的影响力。

    

#### SET 在项目团队

    SWE一般仅在自己的模块领域里提供最优方案，但如果从整个产品的角度来看，视野会显得略微狭窄。一个好的SET正好可以弥补这一点，不仅要具有更宽广的整体产品视野，而且在产品的整个生命周期里对产品及功能特性做充分理解。

    团队 PM（**Project Manager**）：在Google，技术负责人这个非正式的岗位一般由工程师担任，负责设定技术方向、开展合作、充当与其他团队沟通的项目接口人。他知道关于项目的任何问题，或者能够指出谁知道这些问题的细节。技术负责人通常是一名SWE，或者由一名具备SWE能力的工程师来担任。

    在设计阶段，SET在推进项目的同时也可以简化相关项目成员的工作。通常来说，**模块交互方面（例如接口与协议）** 的设计会由SET来做，而不是SWE。为什么？为了能够尽早可以运行集成测试，针对接口依赖关系，SET 需要提供 mock 与fake。

    SET 审阅设计文档的时候要，**具备一定的目的性**，挖掘可能的接口依赖关系。需要完成特定的目标，而不是像读报纸那样随意看两眼。

    

#### SET 实施工作

    在端到端自动化测试上过度投入，常常会把你与产品的特定功能设计绑定在一起，所以端到端测试还是广泛的半自动化方式、甚至手动方式。

    为了使SET也成为源码的拥有者之一，Google把代码审查作为开发流程的中心。相比较编写代码而言，代码审查更值得炫耀。

    提交队列的主要功能是保持“绿色”的构建，这意味着所有测试必须全部通过。这是构建系统和版本控制系统之间的最后一道防线。通过在干净环境中编译代码并运行测试，提交队列系统可以捕获在开发机器上无法发现的错误。

    SET 除了要关注如何正确编写自动化程序之外，还要把 SWE 的注意力转移到在实际项目中如何更大发挥自动化测试的价值上。只有能加速开发过程的自动化测试才有意义，测试不应拖慢开发的速度。

    

#### 测试认证

> 测试认证是 Google 内部的一个活动，拓展 SWE 作为 SET 的工作能力，同时规范“**谁该做什么测试**”的观念。

    我们依然需要开发人员参与进来一起做测试。其中我们使用的一个关键方法就是被称为“测试认证”（译注：Test Certified）的计划。

> 主要内容参考“**测试认证级别摘要**”，此处提供摘要。

    测试认证计划提供了小而清晰且可操作的步骤给团队去执行。级别1是做基本准备：建立测试运行的自动化机制、收集测试覆盖率、去除所有非确定性的测试、挑选冒烟测试集合（如果全部自动化测试运行比较耗时的话）。级别越高就会变得越难，也需要越成熟的测试度。级别2开始着重提高增量覆盖率。级别3重点是测试新增代码。级别4的重点是测试历史遗留代码，通常情况下需要针对可测试性做一些重构。级别5要求更好的整体覆盖率，针对每个缺陷都增加测试用例，并要求使用已有可用的静态与动态分析检查工具。

    

#### SET 的招聘

> 重点关注 SET 的招聘标准，而不是对招聘的实施。

    优秀的SET在各个方面都很出色：是一个编码能力很强的程序员，可以写功能代码；也是一个能力很强的测试者，可以测试任何产品，有能力管理他们自己的工作和工具。优秀的SET不仅可以看到树木而且可以看到整个森林，在看到小段函数原型或者API的时候，就能想到各种使用这段代码的方法以及**怎样破坏这段代码**。

    SET 的面试重点在考察候选人**如何思索问题**的解决方案，而不是解决方案本身的实现上有多么高雅。

    我们期望候选人可以关心函数的正确性以及如何验证期望的行为。如果我们提出一个问题是给模块增加测试场景，我们不希望候选人上来就直接开始罗列所有可能的测试用例，其实我们只是希望他先执行最佳的测试用例。

    Google的人应该质疑几乎所有事情，但仍然会把问题解决掉。

    一个优秀SET候选人不应该被告之要去测试代码，这应该是SET自然要考虑的地方。在被要求去做功能测试之前就去做相应的测试。测试不应是被要求了才去做的事情。

    

#### 访谈 SET 专家

    采用传统瀑布开发模型。在项目设计阶段，需要理解一个问题领域，权衡不同的解决方案，并从中选一个最优的方案。实现阶段一般按照选定的方案去做即可。

> 而敏捷开发模型是“敏捷”的，需求的弹性（伸缩性、可修改性）是以用户故事为载体的。

    专注于你的用户，理解他们的需求并解决他们的问题。不要忽视一些看不见的功能，如可用性和响应速度。

    

## 测试工程师（TE）

#### TE 的主要职责

    TE的重点在于评估对用户的影响以及软件产品整体目标上的风险。与Google的其他大多数技术岗位一样，TE的工作涉及一些编程，但编程只是一小部分。

    为了成为一等公民，TE必须首先是工程师的一部分。Google的TE综合了开发者仰慕的技术能力和以用户为中心检查软件质量而对开发者产生一定制约的能力。

    

#### TE 在项目团队

    TE 工作在项目的大后期，在 SET 之后。

    即使对于一个已经确定要发布的产品，在其研发的早期阶段，功能还在不断变化，最终功能列表和范畴也还没有确定，TE通常没有太多的工作可做。早期过度地投入测试意味着资源的浪费，尤其是在SET已经深度介入的时候。**过早完成的测试产物可能会被丢弃**，也可能出现最糟糕的情况：虽然继续维护，但是毫无附加价值。早期的测试计划需要较少TE，而在产品接近尾声、寻找bug变得更加紧急的时候，需要较多的资源投入到测试上进行探索式测试。

    TE的根本使命是保护用户和业务的利益，使之不受到糟糕的设计、令人困惑的用户体验、功能bug、安全和隐私等问题的困扰。在Google，TE是一个团队中全职地**负责从整体角度**发现产品或服务弱点的唯一角色。

    TE 的角色需要敏锐的洞察力和领导力，因此很多Google的高级测试经理们都来自于 TE 而非 SET。

    

#### 测试计划

    测试人员要处理的是真正的文档和其他临时性的事物，这些事物可能不具有项目代码那样的持久性。

    在项目的早期阶段，测试人员编写测试计划；然后，他们创建和执行测试用例，编写bug报告；接下来是准备覆盖度报告，收集用户满意度和软件质量数据。

    测试人员不应该对测试文档过于珍爱。软件敏捷开发过程是一轮接一轮的迭代，在这个过程里实在很难有时间坐下来欣赏一下测试计划。同时，**测试计划的临时性**也与**测试活动自身的随意性**有关。

    测试计划是最早出现、最先被遗忘的测试产物。

    作为一种测试文档，测试计划的生命周期是所有测试产物中最短的，形式上往往采用在线表格等。

    

#### ACC 测试计划

    ACC（Attribute Component Capability，即特质、组件、能力），这是一种在 Google 实践的测试计划模式，[参考](http://googletesting.blogspot.com/2011/10/google-test-analytics-now-in-open.html)。

    ACC 引入**迭代的理念**，采用渐进式的描述（Make it flow），测试计划的每个部分应该是前面部分的延伸

    如果测试计划没有把测试用例应该怎么执行描述得足够详细，它就没有达到预先设定的帮助测试的本义。做出一个不直接指导测试的计划纯粹是在浪费时间。

    具体而言，ACC通过指导计划者依次考察产品的三个维度达成这个目标：描述产品目标的形容词和副词；确定产品各部分、各特性的名词；描述产品实际做什么的动词。这样，我们通过测试完成的就是验证这些能力（capabilities）能正常运作、产品各组件（component）能满足应用的目标。

    特质是系统的形容词，代表了产品的品质和特色，是区别于竞争对手的关键，也是人们选择你的产品而不是竞争对手的产品的原因。

    如果你不能在几分钟内列举出特质，说明你还没有足够的理解你的产品，还不能有效地测试它。

    组件是构成待建系统的模块，是使一个软件之所以如此的核心要素和代码块。

    能力是系统的动词，代表着系统在用户指令之下完成的动作。它们是对输入的响应、对查询的应答以及代表用户完成的活动。**能力处于特质和组件的交点**。

    反映在 ACC 测试计划上：

- 一个能力点应当被表达为一个动作，反映了用户使用被测应用完成一定的活动。

- 一个能力点应当为测试人员提供足够的指导，用以理解在编写测试用例时涉及的变量。

- 一个能力应当与其他能力组合。

- 每个能力都应该链接到至少一个测试用例。

- 并非所有的能力都是同等重要的，于是引入测试优先级、风险等级等概念。

    

#### 测试优先级与风险

    测试优先级越高，也可以说相应能力的风险就越大。

> 风险并不是缺陷，就如同软件质量并不是软件测试。
> 
> 能力的风险越大，是其存在缺陷的概率就越高，因此我们用频率去逼近概率。

    如何量化风险呢？在 Google，我们确定了两个方面：失败频率（frequency of failure）和影响（impact）。

    在将风险分析结果作为随后测试的依据展示给其他团队成员的时候，实际上是**树了一个靶子**供大家争论。这就是重点：与其询问他们关于某个模糊概念的看法，不如拿一个明确的结论来引起辩论。相关团队成员包括项目经理、开发人员、销售人员、总监和VP。

    

**风险缓解**

    不可能做到 bug free system，所以能力的风险始终存在。

    就软件而言，一种极端的缓解办法是去掉风险最大的组件：交付的软件越少，风险越小。但是，除了彻底的风险消除，还有很多措施可以缓解风险，包括：

- 我们可以围绕风险大的能力点编写用户故事，然后反馈到开发团队，请他们有针对性地增加约束、增强程序健壮性。

- 我们可以编写回归测试用例，以确保问题在重现时可以被捕捉到。

- 我们可以编写和运行引发故障的测试用例，来推动开发实现恢复和回滚的特性。

- 我们可以增强系统在运行时的可观测能力。

    TE 有责任理解所有的风险点，并使用他或她可以利用的任何手段予以缓解。

    高风险组件的每个bug都应该有一个回归测试用例与之对应。

    经常高呼狼来了的TE，其可信度也会下降。

    

**风险与用户故事**

    用户故事中可能会提及能力点，但也只是一带而过，因为它们的关注点是用户行为。

    在编写用户故事的时候，我们仅从用户体验的角度出发关注产品，而绝不应该描述技术性内容。

    用户故事的焦点在于对用户的价值，而测试用例则要比用户故事更加具体，测试用例通常指定了具体的输入和输出。

    

**bug 的生命周期**

    bug和bug报告是每个测试人员都理解的东西。发现bug、分类bug、修复bug、回归测试是软件质量的心跳和运作模式。

> BugDB 往往是领域特定的，这与 CVE DB 不完全一样。

    

#### TE  的招聘

    一直以来，我们形成了面向SWE或SET的招聘和面试流程，而Google的TE招聘则打破了这一模型。

    TE 工作本身需要的一些技术之外的能力，如沟通、系统级别的理解以及用户同理心。

    SET也应该意识到他们不是TE，不必为不能发现用户界面问题、不能从系统整体或竞争者产品的角度思考问题而感到内疚或压力。

    我们寻找的是对于事物结构、对于变量和配置的组合的各种可能性和意义的好奇心。我们寻找的是关于事物应该如何工作的强烈感觉，以及清晰表达的能力。

    另外一个关键特征，是 TE 所需要具备的处理模糊性、反驳糟糕想法的能力。我们通常会更改规格说明或者描述一个说不通的行为，只要候选人提出澄清性的问题就会发现。

    

#### 测试领导和管理工作

    Google 提倡“仆从式领导”（具体参考《Google软件工程》），认为管理者：需要辅导和指导下属工作；关键在于如何激励，而非指令。

**海盗领导力**

    这是一个比喻。不妨去想象一个海盗船的船长是如何维持秩序的，船长无法通过强力或者恐惧来“管理”这群海盗，他们真正的动力在于劫掠的生活方式和看到下一次收成的兴奋感。

    

**绩效考评**

    基本上就是个人提交一份简短的描述，讲一下自己做的东西，做一个自我评价。然后同事和经理发表意见，独立委员会组织会议进行跨团队的比照，给出一个评价结果。重要的一点是 Googler 应该制定比预期能力更高的目标，反映在结果上就是没法达成所有目标。

    

#### 维护模式的测试

    Google 以 尽早交付、经常交付、尽快失败（shipping early and often，and failing fast）的开发模式而闻名于世，这意味着大量项目会转向**维护模式**。

    在把一个项目置于质量维护模式的时候，我们需要减少保持质量所需的人工工作的比重，也就是增加自动化工作的比重。

    维护模式下，大部分工作是监控质量，而不是寻找新问题。

    关于代码的一个有趣之处是它会随着时间的流逝而变坏、出错，应对这一点需要：**留存文档**、**精简测试用例**。

    

**精简测试用例**

    有这些方法：

- 总是通过的测试，淘汰！

- 确保正确理解即将被淘汰的测试用例。

- 我们还会抛弃之前可能发生过误报或者行为反常测试。

- 我们把释放出来的时间用于测试自动化、高优先级的测试或探索式测试。

    为此，Google 开展了 Quality Bot 实验，Bot 面临的核心问题还是 SUT 的可测试性，在 Chrome 项目上就是 DOM 测试。

    Bot 数据令人振奋，几天的编码和单机两晚的执行貌似顶得上多个测试人员超过一年的工作。

    

#### 访谈 TE 专家

##### TE for Google Docs

Q：你如何参与一个新项目呢？你首先会提出哪些问题、做哪些事情？

    对于一个新项目，我首先要站在用户的角度了解这个产品。

    从头到尾的理解产品。不管是整体的设计文档，还是主要功能的设计文档，我都会去看。

    我开始关注项目的状态，特别是质量状态。

    我还会去检查应用的代码库。对每一个大一点的类，我会寻找关联的单元测试

    我还会评审所有自动化测试。

    接下来是团队，我会了解他们沟通的方式和对测试人员的期望。

    

Q：一旦熟悉了这些文档和人事，就只剩下实施了，对吧？

    第一件事是把应用分解为合理的功能模块，有一点重叠没有关系。

    有了功能模块，就可以排列测试的优先级了。

    到这里，我会再次检查bug库。这次是按模块对bug进行分组。

    接下来，我会按照优先级顺序更加细致地遍历所有模块，创建用户故事。

    有了测试集合，我接下来会通过再次检查bug和应用来寻找覆盖度上的不足。

    有了这些基础材料，我的工作通常只是维护和更新：更新测试用例，增加新特性的文档，更新变化了的模块的截屏或视频。

    

Q：身为TE，在你的工作中如何代表用户呢？

    我把自己变成用户，就这么简单。

    

##### TE for YouTube

Q：来到Google之后，这里的软件测试最令你惊讶的是哪一点？

    我觉得这里的TE 和 SET 比其他绝大多数的公司都更加技术化。我经历的其他公司有专门的自动化团队和手工测试团队，而 Google 的 SET 必须写代码，这是他们的工作。这里也很难找到不会写代码的TE。

    Google 测试的另外一个独特之处是大量的自动化。

    接下来，当然要说一下开发负责质量（developer-owns-quality）和以测试为中心的SWE文化了。**质量是大家的共同责任，没人置身事外。**

    

Q：YouTube的测试人员是怎样接受探索式测试这一方法的？

    这是一个巨大的精神鼓舞！测试人员喜欢测试，也喜欢发现bug。探索式测试开阔了测试的活动空间、增加了测试的趣味性。测试人员需要像旅行者一样思考，从不同的角度出发，创造出不同的测试模式来破坏软件。这使测试变得更加有意思、更加有效，因为这种方式的测试可以暴露有趣的、隐秘的、用其他手段或传统重复的过程难以发现的bug。

    

# 思考

**软件工程的核心是人**

    人的精力和时间比 CPU 周期要珍贵得多。

    软件工程中要充分释放人的创造力，在开发、测试等环节。

    沟通的重要性有时甚至超过编码。

    

**软件质量是复杂的**

    软件质量不等于软件测试，质量是