# 计算机领域的经典技术与思想

## 缓冲

    缓冲就是用来匹配**不同粒度、不同速率**的存储部件之间的**数据交换**，典型的实现包括 DBMS 中的 Buffer Pool（BP）和 OS 中的 Virtual Memory（VM）。两者的细微差别在于，BP 是软件实现的（BPM），VM 是硬件实现的（TLB）。

    缓冲的原始思想就是**凑够一个块然后将一批数据写回磁盘**，缓冲就是用来实现**批处理**的。﻿读写放大问题是由于**对一个块的利用率低**造成的。一个块中只有一条记录有效，将该块强制写回就会造成写放大。反之，读出来的一个块中只有一条记录有效，就造成写放大。

    

## 缓存

    cache 是为了弥补高速设备和低速设备的鸿沟而引入的中间层，最终起到加快访问速度的作用。

    buffer 的主要目的进行流量整形，把突发的大数量较小规模的 I/O 整理成平稳的小数量较大规模的 I/O，以减少响应次数。
    [ref: 两者区别](https://www.zhihu.com/question/26190832/answer/1085729156)



## 虚拟化

    

## 资源池化

    

## 快照与备份

    [ref1](https://zhuanlan.zhihu.com/p/21749155)

## 并行

    直观解释什么是“并行”：一个孕妇十个月能生一个小孩 -> 十个孕妇十个月能生十个小孩，这就是通过增加并行性来提升吞吐量。

    

## 模拟实现 VS 原生实现

    这是一组对立的概念。

    `模拟实现` 表示在现有系统A上进行改造，以实现系统B的特性。当然会引入额外开销与性能损耗。

    `原生实现` 表示系统直接从初始状态就支持系统B的特性，并一直向着系统B迭代开发。

    举个栗子，MySQL with Sharding（like [this](https://planetscale.com)） 与 Cloud Native Database（like this） 就存在区别。前者是模拟实现，后者是原生实现。

    固然，原生实现系统的性能更好，但模拟实现系统的改造和使用成本更低。

    

## 自顶向下设计

    high-level -> low-level：从顶层设计到底层实现。
